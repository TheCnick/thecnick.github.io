@import url('https://fonts.googleapis.com/css2?family=UnifrakturCook:wght@700&family=Cinzel:wght@400;700&display=swap');

:root {
  --sage: #3a4a3f;
  --cream: #f4f1ea;
  --black: #121212;
  --gray: #2e2e2e;
  --header-height: 120px;
  --drawer-handle-visible-height: 100px; /* <--- ADJUST THIS TO MATCH THE VISIBLE PART OF YOUR DRAWER IMAGE */
  --base-drawer-width: 796px; /* The original pixel width of your drawer image */
  --base-drawer-height: 941px; /* The original pixel height of your drawer image */

  /* Calculate an aspect ratio for consistent scaling */
  --drawer-aspect-ratio: calc(var(--base-drawer-height) / var(--base-drawer-width));

 /* Define desired max width relative to viewport, or fixed */
  --max-drawer-display-width: min(var(--base-drawer-width), 60vw); /* Don't exceed base width or 60% of viewport width */
 /* Define desired max height relative to viewport, or fixed */
  /* This is crucial to prevent cutoff */
  --max-drawer-display-height: calc(100vh - var(--header-height) - 20px); /* Example: screen height minus header and some buffer */

  /* Calculate the responsive dimensions for the drawer */
  /* This logic ensures it fits within BOTH width and height constraints while maintaining aspect ratio */
  --responsive-drawer-width-based-on-width: var(--max-drawer-display-width);
  --responsive-drawer-height-based-on-width: calc(var(--responsive-drawer-width-based-on-width) * var(--drawer-aspect-ratio));

  --responsive-drawer-height-based-on-height: var(--max-drawer-display-height);
  --responsive-drawer-width-based-on-height: calc(var(--responsive-drawer-height-based-on-height) / var(--drawer-aspect-ratio));

  /* Final responsive width/height: Use whichever constraint (width or height) makes the drawer smaller */
  --final-responsive-width: min(var(--responsive-drawer-width-based-on-width), var(--responsive-drawer-width-based-on-height));
  --final-responsive-height: min(var(--responsive-drawer-height-based-on-width), var(--responsive-drawer-height-based-on-height));
}


body {
  margin: 0;
  background-color: var(--black);
  color: var(--cream);
  line-height: 1.6;
}
  
.drawer-header {
    background: var(--sage);
    padding: 1rem;
    text-align: center;
    font-family: 'UnifrakturCook', cursive;
    font-size: 4rem;
    color: var(--cream);
    position: relative;
    z-index: 1001;
    height: 120px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}



/* style.css */

/* Target the specific ID for higher specificity */
#drawer-container { 
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw; /* Now this should take precedence */
    height: var(--final-responsive-height);
    z-index: 1000;
   
    
    transform: translateY(calc(-100% + var(--drawer-handle-visible-height))); /* THIS SHOULD NOW TAKE PRECEDENCE */
    transition: transform 0.6s ease-in-out; 

    overflow: hidden;
    -webkit-user-drag: none;
    user-select: none;
}

/* Keep the class-based selector for the open state, but ensure it's specific enough */
/* You could also use #drawer2.is-open if needed, but .drawer.is-open is usually fine */
#drawer-container.is-open { 
    transform: translateY(0); 
}

.drawer-background-image {
    position: absolute; /* Position it absolutely within the drawer container */
    top: 0; /* Align to the top of the container */
    left: 50%; /* Center horizontally */
    transform: translateX(-50%); /* Adjust for perfect centering */
    width: var(--final-responsive-width); /* Now uses the final calculated width */
    height: var(--final-responsive-height); /* Now uses the final calculated height */
    object-fit: contain; /* Ensure the entire image is visible without cropping */
    z-index: 1; /* Behind the content */
    pointer-events: none; /* Allows clicks to pass through to the drawer container */
}
  
    /* filter: drop-shadow(0 4px 3px rgba(0,0,0,0.4)); */


/* Styles for drawer-content and icon-link can remain as they are, 
   unless they are also being overridden. */
.drawer-content {
    position: absolute; 
    top: calc(var(--header-height) + (var(--final-responsive-height) * 0.2)); /* Adjust 0.2 */
    left: 50%; 
    transform: translateX(-50%); 
    z-index: 2; 
  
    /* Center its own children if it has any, e.g., the oval img */
    display: flex;
    justify-content: center;
    align-items: center;
}

.drawer-content img {
    /* Adjust these values to place your oval picture precisely where you want it within the drawer image */
    width: calc(var(--final-responsive-width) * 0.10); /* Adjust 0.15 */
    height: auto;
    /* top: 35%; 
    left: 46%; */
    /* With flexbox centering, you might not need top/left. If you need fine-tuning, use margin or absolute positioning */
    /* Example for fine-tuning with margins if centered: */
    /* margin-top: -20px; */ /* Move up slightly from center */
    /* margin-left: -10px; */ /* Move left slightly from center */
    display: block; /* Ensure it behaves as a block element */
    pointer-events: auto; /* Make the image clickable if needed */
}

.icon-link {
    color: white;
    text-decoration: none;
    text-align: center;
    margin: 0 20px;
    opacity: 0;
    transition: opacity 0.5s ease-in-out 0.4s;
}

#drawer-container.is-open .icon-link {
    opacity: 1;
}

.icon-link i {
    font-size: 2em;
    display: block;
    margin-bottom: 8px;
}

.content {
  padding-top: calc(var(--header-height) + 20px); /* Push main content down below the header */
  text-align: center;
}


